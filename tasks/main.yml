---
- name: Install Certbot
  package:
    name: "{{ le_packages[ansible_os_family].certbot }}"

- name: Configure Letsencrypt CLI
  ini_file:
    path: "{{ le_config_dir }}/cli.ini"
    section: null
    option: "{{ item.key }}"
    value: "{{ item.value }}"
  with_dict:
    noninteractive: "true"
    max-log-backups: 0
    email: "{{ le_email }}"
    agree-tos: "true"
  run_once: true

- name: Configure Letsencrypt deploy hook
  ini_file:
    path: "{{ le_config_dir }}/cli.ini"
    section: null
    option: deploy-hook
    value: "{{ le_deploy_hook }}"
  run_once: true
  when: le_deploy_hook is defined

- name: Set Letsencrypt staging/prod mode
  ini_file:
    path: "{{ le_config_dir }}/cli.ini"
    section: null
    option: "staging"
    value: "true"
    state: "{{ le_staging_mode | ternary('present', 'absent') }}"
  run_once: true

- name: Configure Letsencrypt log rotation
  include_role:
    name: devgateway.logrotate
  vars:
    lgrt_name: letsencrypt
    lgrt_path: "{{ le_log_file }}"
    lgrt_config: {}

- name: Include plugin tasks
  include_tasks: "{{ le_plugin }}.yml"

- name: Configure Systemd service
  ini_file:
    dest: "{{ le_systemd_dir }}/{{ le_unit_name }}.service"
    create: true
    mode: 0644
    no_extra_spaces: true
    section: "{{ item.key.split('.')[0] }}"
    option: "{{ item.key.split('.')[1] }}"
    value: "{{ item.value }}"
  with_dict:
    Unit.Description: Update Letsencrypt certificates
    Unit.Requires: "{{ (le_service_requires + ['network-online.target']) | join(' ') }}"
    Service.Type: oneshot
    Service.ExecStart: /usr/bin/certbot renew
  loop_control:
    label: "{{ item.key }}"
  register: le_service_status

- name: Configure Systemd timer
  ini_file:
    dest: "{{ le_systemd_dir }}/{{ le_unit_name }}.timer"
    create: true
    mode: 0644
    no_extra_spaces: true
    section: "{{ item.key.split('.')[0] }}"
    option: "{{ item.key.split('.')[1] }}"
    value: "{{ item.value }}"
  with_dict:
    Unit.Description: Trigger Letsencrypt updates
    Timer.OnCalendar: "{{ le_update_interval }}"
    Timer.Persistent: "true"
  loop_control:
    label: "{{ item.key }}"
  register: le_timer_status

- name: Reload Systemd daemon
  command: systemctl daemon-reload
  when: le_timer_status.changed or le_service_status.changed

- name: Enable and start Letsencrypt timer
  service:
    name: "{{ le_unit_name }}.timer"
    enabled: true
    state: started
  when: le_enable_timer
